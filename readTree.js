var countProperties, fs, get, readFileTree, titleize;

fs = require("fs");

readFileTree = require("readfiletree");

titleize = function(str) {
  return str.replace(/_/g, " ").replace(".csv", "");
};

countProperties = function(obj) {
  return Object.keys(obj).length;
};

get = function(cb) {
  return readFileTree("_csv/", function(err, tree) {
    var category,
      comp,
      comps,
      content_array,
      data,
      filename,
      full_list,
      i,
      index_list,
      len,
      popular_filename,
      popular_filename_list,
      popular_list,
      source_title,
      source_url,
      updated;
    if (err) {
      cb(err);
      return;
    }
    full_list = {};
    index_list = {};
    popular_list = {};
    for (category in tree) {
      comps = tree[category];
      if (category !== ".DS_Store") {
        full_list[category] = {};
        for (filename in comps) {
          comp = comps[filename];
          if (filename !== ".DS_Store") {
            full_list[category][filename.toLowerCase()] = {};
            index_list[filename.toLowerCase()] = {};
            if (typeof comp === "string") {
              content_array = comp.split(/\r\n|\r|\n/);
              source_title = void 0;
              source_url = void 0;
              updated = void 0;
              if (content_array[0].startsWith("[Source: ")) {
                source_title = content_array[0]
                  .match(/\[([^)]+)\]/)[1]
                  .replace("Source: ", "");
                source_url = content_array[0].match(/\((.*)\)/)[1];
                content_array.shift();
              }
              if (content_array[0].startsWith("[Updated: ")) {
                updated = content_array[0]
                  .replace("[Updated: ", "")
                  .replace("]", "");
                content_array.shift();
              }
              if (content_array[1].startsWith("[Updated: ")) {
                updated = content_array[1]
                  .replace("[Updated: ", "")
                  .replace("]", "");
                content_array.shift();
              }
              data = {
                category: category,
                category_length: countProperties(full_list[category]),
                content: content_array,
                folder: filename.replace(".csv", "").toLowerCase(),
                length: content_array.length,
                source_title: source_title,
                source_url: source_url,
                title: titleize(filename),
                updated: updated
              };
              full_list[category][filename.toLowerCase()] = data;
              index_list[filename.toLowerCase()] = data;
              popular_filename_list = [
                "List_of_Countries_and_Territories.csv",
                "List_of_US_States.csv",
                "List_of_Chemical_Elements.csv",
                "List_of_Time_Zones.csv",
                "List_of_Books_of_the_Bible.csv",
                "List_of_US_Presidents.csv"
              ];
              for (i = 0, len = popular_filename_list.length; i < len; i++) {
                popular_filename = popular_filename_list[i];
                if (filename.includes(popular_filename)) {
                  popular_list[filename.toLowerCase()] = data;
                }
              }
            }
          }
        }
      }
    }
    return cb(null, full_list, popular_list, index_list);
  });
};

module.exports = get;

// ---
// generated by coffee-script 1.9.2
